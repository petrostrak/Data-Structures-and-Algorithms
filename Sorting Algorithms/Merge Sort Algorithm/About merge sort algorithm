Merge Sort is a Divide and Conquer algorithm. It divides input array in two halves, calls itself for the 
two halves and then merges the two sorted halves.

Time Complexity: Sorting arrays on different machines. Merge Sort is a recursive algorithm and time 
complexity can be expressed as following recurrence relation. T(n) = 2T(n/2) + θ(n). The above recurrence 
can be solved either using Recurrence Tree method or Master method. It falls in case II of Master Method 
and solution of the recurrence is θ(nLogn). Time complexity of Merge Sort is θ(nLogn) in all 3 cases 
(worst, average and best) as merge sort always divides the array into two halves and take linear time to 
merge two halves.

Merge Sort is useful for sorting linked lists in O(nLogn) time.In the case of linked lists, the case is 
different mainly due to the difference in memory allocation of arrays and linked lists. Unlike arrays, 
linked list nodes may not be adjacent in memory. Unlike an array, in the linked list, we can insert items 
in the middle in O(1) extra space and O(1) time. Therefore merge operation of merge sort can be implemented 
without extra space for linked lists. In arrays, we can do random access as elements are contiguous in 
memory. Let us say we have an integer (4-byte) array A and let the address of A[0] be x then to access A[i], 
we can directly access the memory at (x + i*4). Unlike arrays, we can not do random access in the linked 
list. Quick Sort requires a lot of this kind of access. In linked list to access i’th index, we have to 
travel each and every node from the head to i’th node as we don’t have a continuous block of memory. 
Therefore, the overhead increases for quicksort. Merge sort accesses data sequentially and the need of 
random access is low.
