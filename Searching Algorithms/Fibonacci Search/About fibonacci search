Fibonacci Search is a comparison-based technique that uses Fibonacci numbers to search an element in a sorted array.

Fibonacci Numbers are recursively defined as F(n) = F(n-1) + F(n-2), F(0) = 0, F(1) = 1. First few Fibinacci Numbers 
are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …

The idea is to first find the smallest Fibonacci number that is greater than or equal to the length of given array. 
Let the found Fibonacci number be fib (m’th Fibonacci number). We use (m-2)’th Fibonacci number as the index 
(If it is a valid index). Let (m-2)’th Fibonacci Number be i, we compare arr[i] with x, if x is same, we return i. 
Else if x is greater, we recur for subarray after i, else we recur for subarray before i.

Below is the complete algorithm

Let arr[0..n-1] be the input array and element to be searched be x.

Find the smallest Fibonacci Number greater than or equal to n. Let this number be fibM [m’th Fibonacci Number]. 
Let the two Fibonacci numbers preceding it be fibMm1 [(m-1)’th Fibonacci Number] and fibMm2 [(m-2)’th Fibonacci Number].

While the array has elements to be inspected:
Compare x with the last element of the range covered by fibMm2
If x matches, return index
Else If x is less than the element, move the three Fibonacci variables two Fibonacci down, indicating elimination 
of approximately rear two-third of the remaining array. Else x is greater than the element, move the three Fibonacci 
variables one Fibonacci down. Reset offset to index. Together these indicate elimination of approximately front 
one-third of the remaining array.

Since there might be a single element remaining for comparison, check if fibMm1 is 1. If Yes, compare x with that 
remaining element. If match, return index.
